// Code generated by MockGen. DO NOT EDIT.
// Source: ndisapi_interface.go

// Package mock_ndisapi is a generated GoMock package.
package mock_ndisapi

import (
	reflect "reflect"
	unsafe "unsafe"

	gomock "github.com/golang/mock/gomock"
	ndisapi "github.com/wiresock/ndisapi-go"
	windows "golang.org/x/sys/windows"
)

// MockNdisApiInterface is a mock of NdisApiInterface interface.
type MockNdisApiInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNdisApiInterfaceMockRecorder
}

// MockNdisApiInterfaceMockRecorder is the mock recorder for MockNdisApiInterface.
type MockNdisApiInterfaceMockRecorder struct {
	mock *MockNdisApiInterface
}

// NewMockNdisApiInterface creates a new mock instance.
func NewMockNdisApiInterface(ctrl *gomock.Controller) *MockNdisApiInterface {
	mock := &MockNdisApiInterface{ctrl: ctrl}
	mock.recorder = &MockNdisApiInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNdisApiInterface) EXPECT() *MockNdisApiInterfaceMockRecorder {
	return m.recorder
}

// AddSecondaryFastIo mocks base method.
func (m *MockNdisApiInterface) AddSecondaryFastIo(fastIo *ndisapi.InitializeFastIOSection, size uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecondaryFastIo", fastIo, size)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddSecondaryFastIo indicates an expected call of AddSecondaryFastIo.
func (mr *MockNdisApiInterfaceMockRecorder) AddSecondaryFastIo(fastIo, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecondaryFastIo", reflect.TypeOf((*MockNdisApiInterface)(nil).AddSecondaryFastIo), fastIo, size)
}

// AddStaticFilterBack mocks base method.
func (m *MockNdisApiInterface) AddStaticFilterBack(filter *ndisapi.StaticFilterEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStaticFilterBack", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStaticFilterBack indicates an expected call of AddStaticFilterBack.
func (mr *MockNdisApiInterfaceMockRecorder) AddStaticFilterBack(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStaticFilterBack", reflect.TypeOf((*MockNdisApiInterface)(nil).AddStaticFilterBack), filter)
}

// AddStaticFilterFront mocks base method.
func (m *MockNdisApiInterface) AddStaticFilterFront(filter *ndisapi.StaticFilterEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStaticFilterFront", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStaticFilterFront indicates an expected call of AddStaticFilterFront.
func (mr *MockNdisApiInterfaceMockRecorder) AddStaticFilterFront(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStaticFilterFront", reflect.TypeOf((*MockNdisApiInterface)(nil).AddStaticFilterFront), filter)
}

// Close mocks base method.
func (m *MockNdisApiInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockNdisApiInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNdisApiInterface)(nil).Close))
}

// ConvertWindows2000AdapterName mocks base method.
func (m *MockNdisApiInterface) ConvertWindows2000AdapterName(adapterName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertWindows2000AdapterName", adapterName)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConvertWindows2000AdapterName indicates an expected call of ConvertWindows2000AdapterName.
func (mr *MockNdisApiInterfaceMockRecorder) ConvertWindows2000AdapterName(adapterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertWindows2000AdapterName", reflect.TypeOf((*MockNdisApiInterface)(nil).ConvertWindows2000AdapterName), adapterName)
}

// DeviceIoControl mocks base method.
func (m *MockNdisApiInterface) DeviceIoControl(service uint32, in unsafe.Pointer, sizeIn uint32, out unsafe.Pointer, sizeOut uint32, SizeRet *uint32, overlapped *windows.Overlapped) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceIoControl", service, in, sizeIn, out, sizeOut, SizeRet, overlapped)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeviceIoControl indicates an expected call of DeviceIoControl.
func (mr *MockNdisApiInterfaceMockRecorder) DeviceIoControl(service, in, sizeIn, out, sizeOut, SizeRet, overlapped interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceIoControl", reflect.TypeOf((*MockNdisApiInterface)(nil).DeviceIoControl), service, in, sizeIn, out, sizeOut, SizeRet, overlapped)
}

// DisablePacketFilterCache mocks base method.
func (m *MockNdisApiInterface) DisablePacketFilterCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePacketFilterCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// DisablePacketFilterCache indicates an expected call of DisablePacketFilterCache.
func (mr *MockNdisApiInterfaceMockRecorder) DisablePacketFilterCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePacketFilterCache", reflect.TypeOf((*MockNdisApiInterface)(nil).DisablePacketFilterCache))
}

// DisablePacketFragmentCache mocks base method.
func (m *MockNdisApiInterface) DisablePacketFragmentCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePacketFragmentCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// DisablePacketFragmentCache indicates an expected call of DisablePacketFragmentCache.
func (mr *MockNdisApiInterfaceMockRecorder) DisablePacketFragmentCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePacketFragmentCache", reflect.TypeOf((*MockNdisApiInterface)(nil).DisablePacketFragmentCache))
}

// EnablePacketFilterCache mocks base method.
func (m *MockNdisApiInterface) EnablePacketFilterCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePacketFilterCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePacketFilterCache indicates an expected call of EnablePacketFilterCache.
func (mr *MockNdisApiInterfaceMockRecorder) EnablePacketFilterCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePacketFilterCache", reflect.TypeOf((*MockNdisApiInterface)(nil).EnablePacketFilterCache))
}

// EnablePacketFragmentCache mocks base method.
func (m *MockNdisApiInterface) EnablePacketFragmentCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePacketFragmentCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePacketFragmentCache indicates an expected call of EnablePacketFragmentCache.
func (mr *MockNdisApiInterfaceMockRecorder) EnablePacketFragmentCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePacketFragmentCache", reflect.TypeOf((*MockNdisApiInterface)(nil).EnablePacketFragmentCache))
}

// FlushAdapterPacketQueue mocks base method.
func (m *MockNdisApiInterface) FlushAdapterPacketQueue(adapter ndisapi.Handle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAdapterPacketQueue", adapter)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAdapterPacketQueue indicates an expected call of FlushAdapterPacketQueue.
func (mr *MockNdisApiInterfaceMockRecorder) FlushAdapterPacketQueue(adapter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAdapterPacketQueue", reflect.TypeOf((*MockNdisApiInterface)(nil).FlushAdapterPacketQueue), adapter)
}

// GetAdapterMode mocks base method.
func (m *MockNdisApiInterface) GetAdapterMode(currentMode *ndisapi.AdapterMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapterMode", currentMode)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAdapterMode indicates an expected call of GetAdapterMode.
func (mr *MockNdisApiInterfaceMockRecorder) GetAdapterMode(currentMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterMode", reflect.TypeOf((*MockNdisApiInterface)(nil).GetAdapterMode), currentMode)
}

// GetAdapterPacketQueueSize mocks base method.
func (m *MockNdisApiInterface) GetAdapterPacketQueueSize(adapter ndisapi.Handle, size *uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapterPacketQueueSize", adapter, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAdapterPacketQueueSize indicates an expected call of GetAdapterPacketQueueSize.
func (mr *MockNdisApiInterfaceMockRecorder) GetAdapterPacketQueueSize(adapter, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapterPacketQueueSize", reflect.TypeOf((*MockNdisApiInterface)(nil).GetAdapterPacketQueueSize), adapter, size)
}

// GetIntermediateBufferPoolSize mocks base method.
func (m *MockNdisApiInterface) GetIntermediateBufferPoolSize(size uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntermediateBufferPoolSize", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetIntermediateBufferPoolSize indicates an expected call of GetIntermediateBufferPoolSize.
func (mr *MockNdisApiInterfaceMockRecorder) GetIntermediateBufferPoolSize(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntermediateBufferPoolSize", reflect.TypeOf((*MockNdisApiInterface)(nil).GetIntermediateBufferPoolSize), size)
}

// GetPacketFilterTable mocks base method.
func (m *MockNdisApiInterface) GetPacketFilterTable() (*ndisapi.StaticFilterTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPacketFilterTable")
	ret0, _ := ret[0].(*ndisapi.StaticFilterTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPacketFilterTable indicates an expected call of GetPacketFilterTable.
func (mr *MockNdisApiInterfaceMockRecorder) GetPacketFilterTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPacketFilterTable", reflect.TypeOf((*MockNdisApiInterface)(nil).GetPacketFilterTable))
}

// GetPacketFilterTableResetStats mocks base method.
func (m *MockNdisApiInterface) GetPacketFilterTableResetStats() (*ndisapi.StaticFilterTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPacketFilterTableResetStats")
	ret0, _ := ret[0].(*ndisapi.StaticFilterTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPacketFilterTableResetStats indicates an expected call of GetPacketFilterTableResetStats.
func (mr *MockNdisApiInterfaceMockRecorder) GetPacketFilterTableResetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPacketFilterTableResetStats", reflect.TypeOf((*MockNdisApiInterface)(nil).GetPacketFilterTableResetStats))
}

// GetPacketFilterTableSize mocks base method.
func (m *MockNdisApiInterface) GetPacketFilterTableSize() (*uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPacketFilterTableSize")
	ret0, _ := ret[0].(*uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPacketFilterTableSize indicates an expected call of GetPacketFilterTableSize.
func (mr *MockNdisApiInterfaceMockRecorder) GetPacketFilterTableSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPacketFilterTableSize", reflect.TypeOf((*MockNdisApiInterface)(nil).GetPacketFilterTableSize))
}

// GetTcpipBoundAdaptersInfo mocks base method.
func (m *MockNdisApiInterface) GetTcpipBoundAdaptersInfo() (*ndisapi.TcpAdapterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTcpipBoundAdaptersInfo")
	ret0, _ := ret[0].(*ndisapi.TcpAdapterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTcpipBoundAdaptersInfo indicates an expected call of GetTcpipBoundAdaptersInfo.
func (mr *MockNdisApiInterfaceMockRecorder) GetTcpipBoundAdaptersInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTcpipBoundAdaptersInfo", reflect.TypeOf((*MockNdisApiInterface)(nil).GetTcpipBoundAdaptersInfo))
}

// GetVersion mocks base method.
func (m *MockNdisApiInterface) GetVersion() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockNdisApiInterfaceMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockNdisApiInterface)(nil).GetVersion))
}

// InitializeFastIo mocks base method.
func (m *MockNdisApiInterface) InitializeFastIo(pFastIo *ndisapi.InitializeFastIOSection, dwSize uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeFastIo", pFastIo, dwSize)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InitializeFastIo indicates an expected call of InitializeFastIo.
func (mr *MockNdisApiInterfaceMockRecorder) InitializeFastIo(pFastIo, dwSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeFastIo", reflect.TypeOf((*MockNdisApiInterface)(nil).InitializeFastIo), pFastIo, dwSize)
}

// InsertStaticFilter mocks base method.
func (m *MockNdisApiInterface) InsertStaticFilter(filter *ndisapi.StaticFilterEntry, position uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStaticFilter", filter, position)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertStaticFilter indicates an expected call of InsertStaticFilter.
func (mr *MockNdisApiInterfaceMockRecorder) InsertStaticFilter(filter, position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStaticFilter", reflect.TypeOf((*MockNdisApiInterface)(nil).InsertStaticFilter), filter, position)
}

// IsDriverLoaded mocks base method.
func (m *MockNdisApiInterface) IsDriverLoaded() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDriverLoaded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDriverLoaded indicates an expected call of IsDriverLoaded.
func (mr *MockNdisApiInterfaceMockRecorder) IsDriverLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDriverLoaded", reflect.TypeOf((*MockNdisApiInterface)(nil).IsDriverLoaded))
}

// IsNdiswanBh mocks base method.
func (m *MockNdisApiInterface) IsNdiswanBh(adapterName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNdiswanBh", adapterName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNdiswanBh indicates an expected call of IsNdiswanBh.
func (mr *MockNdisApiInterfaceMockRecorder) IsNdiswanBh(adapterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNdiswanBh", reflect.TypeOf((*MockNdisApiInterface)(nil).IsNdiswanBh), adapterName)
}

// IsNdiswanIP mocks base method.
func (m *MockNdisApiInterface) IsNdiswanIP(adapterName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNdiswanIP", adapterName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNdiswanIP indicates an expected call of IsNdiswanIP.
func (mr *MockNdisApiInterfaceMockRecorder) IsNdiswanIP(adapterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNdiswanIP", reflect.TypeOf((*MockNdisApiInterface)(nil).IsNdiswanIP), adapterName)
}

// IsNdiswanIPv6 mocks base method.
func (m *MockNdisApiInterface) IsNdiswanIPv6(adapterName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNdiswanIPv6", adapterName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNdiswanIPv6 indicates an expected call of IsNdiswanIPv6.
func (mr *MockNdisApiInterfaceMockRecorder) IsNdiswanIPv6(adapterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNdiswanIPv6", reflect.TypeOf((*MockNdisApiInterface)(nil).IsNdiswanIPv6), adapterName)
}

// IsNdiswanInterfaces mocks base method.
func (m *MockNdisApiInterface) IsNdiswanInterfaces(adapterName, ndiswanName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNdiswanInterfaces", adapterName, ndiswanName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNdiswanInterfaces indicates an expected call of IsNdiswanInterfaces.
func (mr *MockNdisApiInterfaceMockRecorder) IsNdiswanInterfaces(adapterName, ndiswanName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNdiswanInterfaces", reflect.TypeOf((*MockNdisApiInterface)(nil).IsNdiswanInterfaces), adapterName, ndiswanName)
}

// IsWindows10OrGreater mocks base method.
func (m *MockNdisApiInterface) IsWindows10OrGreater() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWindows10OrGreater")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWindows10OrGreater indicates an expected call of IsWindows10OrGreater.
func (mr *MockNdisApiInterfaceMockRecorder) IsWindows10OrGreater() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWindows10OrGreater", reflect.TypeOf((*MockNdisApiInterface)(nil).IsWindows10OrGreater))
}

// ReadPacket mocks base method.
func (m *MockNdisApiInterface) ReadPacket(packet *ndisapi.EtherRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPacket", packet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReadPacket indicates an expected call of ReadPacket.
func (mr *MockNdisApiInterfaceMockRecorder) ReadPacket(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPacket", reflect.TypeOf((*MockNdisApiInterface)(nil).ReadPacket), packet)
}

// ReadPackets mocks base method.
func (m *MockNdisApiInterface) ReadPackets(packet *ndisapi.EtherMultiRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPackets", packet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReadPackets indicates an expected call of ReadPackets.
func (mr *MockNdisApiInterfaceMockRecorder) ReadPackets(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPackets", reflect.TypeOf((*MockNdisApiInterface)(nil).ReadPackets), packet)
}

// ReadPacketsUnsorted mocks base method.
func (m *MockNdisApiInterface) ReadPacketsUnsorted(packets []*ndisapi.IntermediateBuffer, dwPacketsNum uint32, pdwPacketsSuccess *uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPacketsUnsorted", packets, dwPacketsNum, pdwPacketsSuccess)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReadPacketsUnsorted indicates an expected call of ReadPacketsUnsorted.
func (mr *MockNdisApiInterfaceMockRecorder) ReadPacketsUnsorted(packets, dwPacketsNum, pdwPacketsSuccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPacketsUnsorted", reflect.TypeOf((*MockNdisApiInterface)(nil).ReadPacketsUnsorted), packets, dwPacketsNum, pdwPacketsSuccess)
}

// RemoveStaticFilter mocks base method.
func (m *MockNdisApiInterface) RemoveStaticFilter(filterID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStaticFilter", filterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStaticFilter indicates an expected call of RemoveStaticFilter.
func (mr *MockNdisApiInterfaceMockRecorder) RemoveStaticFilter(filterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStaticFilter", reflect.TypeOf((*MockNdisApiInterface)(nil).RemoveStaticFilter), filterID)
}

// ResetPacketFilterTable mocks base method.
func (m *MockNdisApiInterface) ResetPacketFilterTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPacketFilterTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPacketFilterTable indicates an expected call of ResetPacketFilterTable.
func (mr *MockNdisApiInterfaceMockRecorder) ResetPacketFilterTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPacketFilterTable", reflect.TypeOf((*MockNdisApiInterface)(nil).ResetPacketFilterTable))
}

// SendPacketToAdapter mocks base method.
func (m *MockNdisApiInterface) SendPacketToAdapter(packet *ndisapi.EtherRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPacketToAdapter", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPacketToAdapter indicates an expected call of SendPacketToAdapter.
func (mr *MockNdisApiInterfaceMockRecorder) SendPacketToAdapter(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPacketToAdapter", reflect.TypeOf((*MockNdisApiInterface)(nil).SendPacketToAdapter), packet)
}

// SendPacketToMstcp mocks base method.
func (m *MockNdisApiInterface) SendPacketToMstcp(packet *ndisapi.EtherRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPacketToMstcp", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPacketToMstcp indicates an expected call of SendPacketToMstcp.
func (mr *MockNdisApiInterfaceMockRecorder) SendPacketToMstcp(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPacketToMstcp", reflect.TypeOf((*MockNdisApiInterface)(nil).SendPacketToMstcp), packet)
}

// SendPacketsToAdapter mocks base method.
func (m *MockNdisApiInterface) SendPacketsToAdapter(packet *ndisapi.EtherMultiRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPacketsToAdapter", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPacketsToAdapter indicates an expected call of SendPacketsToAdapter.
func (mr *MockNdisApiInterfaceMockRecorder) SendPacketsToAdapter(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPacketsToAdapter", reflect.TypeOf((*MockNdisApiInterface)(nil).SendPacketsToAdapter), packet)
}

// SendPacketsToAdaptersUnsorted mocks base method.
func (m *MockNdisApiInterface) SendPacketsToAdaptersUnsorted(packets []*ndisapi.IntermediateBuffer, dwPacketsNum uint32, pdwPacketSuccess *uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPacketsToAdaptersUnsorted", packets, dwPacketsNum, pdwPacketSuccess)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SendPacketsToAdaptersUnsorted indicates an expected call of SendPacketsToAdaptersUnsorted.
func (mr *MockNdisApiInterfaceMockRecorder) SendPacketsToAdaptersUnsorted(packets, dwPacketsNum, pdwPacketSuccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPacketsToAdaptersUnsorted", reflect.TypeOf((*MockNdisApiInterface)(nil).SendPacketsToAdaptersUnsorted), packets, dwPacketsNum, pdwPacketSuccess)
}

// SendPacketsToMstcp mocks base method.
func (m *MockNdisApiInterface) SendPacketsToMstcp(packet *ndisapi.EtherMultiRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPacketsToMstcp", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPacketsToMstcp indicates an expected call of SendPacketsToMstcp.
func (mr *MockNdisApiInterfaceMockRecorder) SendPacketsToMstcp(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPacketsToMstcp", reflect.TypeOf((*MockNdisApiInterface)(nil).SendPacketsToMstcp), packet)
}

// SendPacketsToMstcpUnsorted mocks base method.
func (m *MockNdisApiInterface) SendPacketsToMstcpUnsorted(packets []*ndisapi.IntermediateBuffer, dwPacketsNum uint32, pdwPacketSuccess *uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPacketsToMstcpUnsorted", packets, dwPacketsNum, pdwPacketSuccess)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SendPacketsToMstcpUnsorted indicates an expected call of SendPacketsToMstcpUnsorted.
func (mr *MockNdisApiInterfaceMockRecorder) SendPacketsToMstcpUnsorted(packets, dwPacketsNum, pdwPacketSuccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPacketsToMstcpUnsorted", reflect.TypeOf((*MockNdisApiInterface)(nil).SendPacketsToMstcpUnsorted), packets, dwPacketsNum, pdwPacketSuccess)
}

// SetAdapterMode mocks base method.
func (m *MockNdisApiInterface) SetAdapterMode(currentMode *ndisapi.AdapterMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAdapterMode", currentMode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAdapterMode indicates an expected call of SetAdapterMode.
func (mr *MockNdisApiInterfaceMockRecorder) SetAdapterMode(currentMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdapterMode", reflect.TypeOf((*MockNdisApiInterface)(nil).SetAdapterMode), currentMode)
}

// SetPacketEvent mocks base method.
func (m *MockNdisApiInterface) SetPacketEvent(adapter ndisapi.Handle, win32Event windows.Handle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPacketEvent", adapter, win32Event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPacketEvent indicates an expected call of SetPacketEvent.
func (mr *MockNdisApiInterfaceMockRecorder) SetPacketEvent(adapter, win32Event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPacketEvent", reflect.TypeOf((*MockNdisApiInterface)(nil).SetPacketEvent), adapter, win32Event)
}

// SetPacketFilterCacheState mocks base method.
func (m *MockNdisApiInterface) SetPacketFilterCacheState(state bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPacketFilterCacheState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPacketFilterCacheState indicates an expected call of SetPacketFilterCacheState.
func (mr *MockNdisApiInterfaceMockRecorder) SetPacketFilterCacheState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPacketFilterCacheState", reflect.TypeOf((*MockNdisApiInterface)(nil).SetPacketFilterCacheState), state)
}

// SetPacketFilterTable mocks base method.
func (m *MockNdisApiInterface) SetPacketFilterTable(packet *ndisapi.StaticFilterTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPacketFilterTable", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPacketFilterTable indicates an expected call of SetPacketFilterTable.
func (mr *MockNdisApiInterfaceMockRecorder) SetPacketFilterTable(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPacketFilterTable", reflect.TypeOf((*MockNdisApiInterface)(nil).SetPacketFilterTable), packet)
}

// SetPacketFragmentCacheState mocks base method.
func (m *MockNdisApiInterface) SetPacketFragmentCacheState(state bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPacketFragmentCacheState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPacketFragmentCacheState indicates an expected call of SetPacketFragmentCacheState.
func (mr *MockNdisApiInterfaceMockRecorder) SetPacketFragmentCacheState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPacketFragmentCacheState", reflect.TypeOf((*MockNdisApiInterface)(nil).SetPacketFragmentCacheState), state)
}
